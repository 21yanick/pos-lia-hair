# POS-LIA-HAIR Production Docker Compose
# Optimized for Coolify deployment with separate NextJS and Supabase services

version: '3.8'

services:
  # NextJS Application (Main POS System)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
    depends_on:
      supabase-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pos-network

  # Supabase Database (PostgreSQL)
  supabase-db:
    image: supabase/postgres:15.1.0.147
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_HOST=/var/run/postgresql
      - PGPORT=5432
      - POSTGRES_PORT=5432
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=postgres
      - POSTGRES_DB=postgres
      - PGUSER=supabase_admin
      - POSTGRES_USER=supabase_admin
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supabase_admin -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - pos-network

  # Supabase Auth (GoTrue)
  supabase-auth:
    image: supabase/gotrue:v2.143.0
    ports:
      - "9999:9999"
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=${API_EXTERNAL_URL}
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgresql://supabase_auth_admin:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      - GOTRUE_SITE_URL=${SITE_URL}
      - GOTRUE_URI_ALLOW_LIST=${ADDITIONAL_REDIRECT_URLS}
      - GOTRUE_DISABLE_SIGNUP=${DISABLE_SIGNUP}
      - GOTRUE_JWT_ADMIN_ROLES=service_role
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_EXP=${JWT_EXPIRY}
      - GOTRUE_JWT_SECRET=${JWT_SECRET}
      - GOTRUE_EXTERNAL_EMAIL_ENABLED=${ENABLE_EMAIL_CONFIRMATIONS}
      - GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED=${ENABLE_ANONYMOUS_USERS}
      - GOTRUE_MAILER_AUTOCONFIRM=${ENABLE_EMAIL_AUTOCONFIRM}
      - GOTRUE_SMTP_ADMIN_EMAIL=${SMTP_ADMIN_EMAIL}
      - GOTRUE_SMTP_HOST=${SMTP_HOST}
      - GOTRUE_SMTP_PORT=${SMTP_PORT}
      - GOTRUE_SMTP_USER=${SMTP_USER}
      - GOTRUE_SMTP_PASS=${SMTP_PASS}
      - GOTRUE_SMTP_SENDER_NAME=${SMTP_SENDER_NAME}
    depends_on:
      supabase-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pos-network

  # Supabase REST API (PostgREST)
  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    ports:
      - "3001:3000"
    environment:
      - PGRST_DB_URI=postgresql://authenticator:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      - PGRST_DB_SCHEMAS=${PGRST_DB_SCHEMAS}
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${JWT_SECRET}
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET}
      - PGRST_APP_SETTINGS_JWT_EXP=${JWT_EXPIRY}
    depends_on:
      supabase-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pos-network

  # Supabase Storage
  supabase-storage:
    image: supabase/storage-api:v0.46.4
    ports:
      - "5000:5000"
    environment:
      - ANON_KEY=${ANON_KEY}
      - SERVICE_KEY=${SERVICE_ROLE_KEY}
      - POSTGREST_URL=http://supabase-rest:3000
      - PGRST_JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://supabase_storage_admin:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      - FILE_SIZE_LIMIT=52428800
      - STORAGE_BACKEND=file
      - FILE_STORAGE_BACKEND_PATH=/var/lib/storage
      - TENANT_ID=stub
      - REGION=stub
      - GLOBAL_S3_BUCKET=stub
      - ENABLE_IMAGE_TRANSFORMATION=true
      - IMGPROXY_URL=http://supabase-imgproxy:5001
    volumes:
      - supabase-storage-data:/var/lib/storage
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    restart: unless-stopped
    networks:
      - pos-network

  # Image Proxy for Storage
  supabase-imgproxy:
    image: darthsim/imgproxy:v3.8.0
    ports:
      - "5001:5001"
    environment:
      - IMGPROXY_BIND=0.0.0.0:5001
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/var/lib/storage
      - IMGPROXY_USE_ETAG=true
    volumes:
      - supabase-storage-data:/var/lib/storage:ro
    restart: unless-stopped
    networks:
      - pos-network

  # API Gateway (Kong)
  supabase-kong:
    image: kong:2.8.1
    ports:
      - "8000:8000"
      - "8443:8443"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/var/lib/kong/kong.yml
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_PLUGINS=request-transformer,cors,key-auth,acl,basic-auth
      - KONG_NGINX_PROXY_PROXY_BUFFER_SIZE=160k
      - KONG_NGINX_PROXY_PROXY_BUFFERS=64 160k
    volumes:
      - ./config/kong.yml:/var/lib/kong/kong.yml:ro
    depends_on:
      - supabase-auth
      - supabase-rest
      - supabase-storage
    restart: unless-stopped
    networks:
      - pos-network

volumes:
  supabase-db-data:
    driver: local
  supabase-storage-data:
    driver: local

networks:
  pos-network:
    driver: bridge