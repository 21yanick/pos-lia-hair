import React from 'react'
import type { MonthlyStatsData, ExportType, ExportData } from '@/shared/types/monthly'
import type { TransactionItem } from '@/shared/types/transactions'
import { formatMonthYear } from './reportHelpers'

// CSV Export functionality
export function exportToCSV(data: ExportData): void {
  const { type, label, transactions, selectedMonth } = data
  
  let csvContent = `${label} - ${formatMonthYear(selectedMonth)}\n`
  csvContent += `Exportiert am: ${new Date().toLocaleDateString('de-CH')}\n\n`
  
  // Header f√ºr neue TransactionItem Struktur
  csvContent += 'Datum,Typ,Beschreibung,Betrag,Zahlungsart,Status\n'
  
  // Daten hinzuf√ºgen
  transactions.forEach(transaction => {
    const date = new Date(transaction.date).toLocaleDateString('de-CH')
    const sign = transaction.amount < 0 ? '-' : ''
    const typeLabel = transaction.type === 'sale' ? 'Verkauf' : 
                     transaction.type === 'expense' ? 'Ausgabe' : 
                     transaction.type === 'bank_deposit' ? 'Bankeinzahlung' : 'Unbekannt'
    
    csvContent += `${date},"${typeLabel}","${transaction.description || ''}",${sign}${Math.abs(transaction.amount)},${transaction.method},${transaction.status}\n`
  })
  
  // CSV-Datei herunterladen
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const url = window.URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `${label.toLowerCase().replace(/\s+/g, '_')}_${selectedMonth}.csv`
  a.click()
  window.URL.revokeObjectURL(url)
}

// PDF Export f√ºr kompletten Monat (moderne React-PDF Version)
export async function exportMonthlyPDF(
  stats: MonthlyStatsData,
  transactions: TransactionItem[],
  selectedMonth: string,
  autoGenerated = false
): Promise<void> {
  console.log("üîß Monthly PDF Generierung gestartet f√ºr:", selectedMonth)
  
  try {
    // Dynamischer Import f√ºr PDF-Komponente
    const { MonthlyReportPDF } = await import('@/components/pdf/MonthlyReportPDF')
    
    // React-PDF Komponente erstellen
    const pdfComponent = React.createElement(MonthlyReportPDF, {
      stats,
      transactions,
      selectedMonth
    })
    
    // PDF direkt mit react-pdf erstellen
    const { pdf } = await import('@react-pdf/renderer')
    const blob = await pdf(pdfComponent).toBlob()
    const fileName = `monatsabschluss-${selectedMonth}.pdf`
    const file = new File([blob], fileName, { type: 'application/pdf' })
    
    // Datei zu Supabase Storage hochladen
    const { supabase } = await import('@/lib/supabase/client')
    const filePath = `documents/monthly_reports/${fileName}`
    console.log("‚òÅÔ∏è Lade Monthly PDF zu Storage hoch:", filePath)
    
    const { error: uploadError } = await supabase.storage
      .from('documents')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: true
      })
      
    if (uploadError) {
      console.error('‚ùå Fehler beim Hochladen der Monthly PDF:', uploadError)
      throw uploadError
    }

    // Dokument-Eintrag in der Datenbank erstellen
    console.log("üóÉÔ∏è Erstelle Monthly Document-Eintrag...")
    const { data: userData } = await supabase.auth.getUser()
    if (!userData?.user) {
      throw new Error('Benutzer nicht angemeldet')
    }
    
    const monthDate = `${selectedMonth}-01`
    const monthlyUUID = crypto.randomUUID()
    
    const documentData = {
      type: 'monthly_report' as const,
      reference_id: monthlyUUID,
      file_path: filePath,
      payment_method: null,
      document_date: monthDate,
      user_id: userData.user.id
    }
    
    const { error: documentError } = await supabase
      .from('documents')
      .upsert(documentData)
    
    if (documentError) {
      console.error('‚ùå Fehler beim Erstellen des Monthly Document-Eintrags:', documentError)
      throw documentError
    }
    
    console.log("‚úÖ Monthly Document-Eintrag erfolgreich erstellt")

    // PDF nur √∂ffnen wenn nicht automatisch generiert
    if (!autoGenerated) {
      console.log("üåê √ñffne Monthly PDF...")
      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(filePath)
      
      window.open(urlData.publicUrl, '_blank')
      console.log("üéâ Monthly PDF erfolgreich erstellt und ge√∂ffnet")
    } else {
      console.log("üéâ Monthly PDF automatisch erstellt und gespeichert")
    }
    
  } catch (error: any) {
    console.error('‚ùå Fehler beim Erstellen der Monthly PDF:', error)
    
    // Fallback: Manueller Download mit alter Methode
    console.log("‚ö†Ô∏è Fallback zu direktem Download...")
    const blob = await createFallbackPDF(stats, transactions, selectedMonth)
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `monatsabschluss-${selectedMonth}.pdf`
    a.click()
    window.URL.revokeObjectURL(url)
  }
}

// PDF f√ºr bestimmten Monat √∂ffnen/downloaden
export async function openMonthlyPDF(selectedMonth: string): Promise<void> {
  try {
    const { supabase } = await import('@/lib/supabase/client')
    
    // Pr√ºfen ob PDF bereits existiert
    const fileName = `monatsabschluss-${selectedMonth}.pdf`
    const filePath = `documents/monthly_reports/${fileName}`
    
    console.log("üîç Suche nach existierendem PDF:", filePath)
    
    // Erst in der documents table suchen
    const monthDate = `${selectedMonth}-01`
    const { data: documentData, error: documentError } = await supabase
      .from('documents')
      .select('file_path')
      .eq('type', 'monthly_report')
      .eq('document_date', monthDate)
      .single()
    
    if (documentData && !documentError) {
      // PDF existiert in Datenbank, versuche es zu √∂ffnen
      console.log("üìÑ PDF gefunden in Datenbank:", documentData.file_path)
      
      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(documentData.file_path)
      
      if (urlData.publicUrl) {
        console.log("üåê √ñffne existierendes PDF:", urlData.publicUrl)
        window.open(urlData.publicUrl, '_blank')
        return
      }
    }
    
    // PDF existiert nicht, weiterleiten zur Documents-Seite
    console.log("‚ö†Ô∏è PDF nicht gefunden, leite zu Documents weiter")
    window.open(`/documents?month=${selectedMonth}`, '_blank')
    
  } catch (error: any) {
    console.error('‚ùå Fehler beim √ñffnen des PDFs:', error)
    // Fallback: Documents-Seite √∂ffnen
    window.open(`/documents?month=${selectedMonth}`, '_blank')
  }
}

// Hauptexport-Funktion
export async function handleExport(data: ExportData): Promise<void> {
  const { type } = data
  
  if (type === 'complete_month') {
    // F√ºr kompletten Monat PDF erstellen
    await exportMonthlyPDF(data.stats, data.transactions, data.selectedMonth)
  } else {
    // F√ºr spezifische Exports CSV erstellen
    exportToCSV(data)
  }
}

// Fallback-Funktion f√ºr direkten Download (vereinfacht)
async function createFallbackPDF(
  stats: MonthlyStatsData,
  transactions: TransactionItem[],
  selectedMonth: string
): Promise<Blob> {
  // Dynamischer Import f√ºr React-PDF
  const { pdf } = await import('@react-pdf/renderer')
  const { MonthlyReportPDF } = await import('@/components/pdf/MonthlyReportPDF')
  
  const pdfComponent = React.createElement(MonthlyReportPDF, {
    stats,
    transactions,
    selectedMonth
  })
  
  return await pdf(pdfComponent).toBlob()
}