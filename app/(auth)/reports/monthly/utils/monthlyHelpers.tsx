import React from 'react'
import { MonthlyReportPDF } from '@/components/pdf/MonthlyReportPDF'
import type { TransactionItem } from '../components/TransactionsList'
import type { MonthlyStatsData } from '../components/MonthlyStats'
import type { ExportType } from '../components/ExportButtons'

export type ExportData = {
  type: ExportType
  label: string
  transactions: TransactionItem[]
  stats: MonthlyStatsData
  selectedMonth: string
  total: number
}

// Hilfsfunktion: Aktueller Monat/Jahr formatiert
export function getCurrentYearMonth(): string {
  const now = new Date()
  const year = now.getFullYear()
  const month = now.getMonth() + 1
  return `${year}-${month.toString().padStart(2, '0')}`
}

// Hilfsfunktion: Monatsoptionen f√ºr Dropdown
export function getMonthOptions() {
  const options = []
  const currentDate = new Date()
  
  // Die letzten 12 Monate
  for (let i = 0; i < 12; i++) {
    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1)
    const year = date.getFullYear()
    const month = date.getMonth() + 1
    const value = `${year}-${month.toString().padStart(2, '0')}`
    const label = date.toLocaleDateString("de-CH", { month: "long", year: "numeric" })
    options.push({ value, label })
  }
  
  return options
}

// Hilfsfunktion: Formatiertes Datum f√ºr Anzeige
export function formatMonthYear(yearMonth: string): string {
  const [year, month] = yearMonth.split('-').map(Number)
  return new Date(year, month - 1, 1).toLocaleDateString("de-CH", { 
    month: "long", 
    year: "numeric"
  })
}

// CSV Export
export function exportToCSV(data: ExportData): void {
  const { type, label, transactions, selectedMonth } = data
  
  let csvContent = `${label} - ${formatMonthYear(selectedMonth)}\n`
  csvContent += `Exportiert am: ${new Date().toLocaleDateString('de-CH')}\n\n`
  
  // Header je nach Export-Typ
  if (type === 'complete_month') {
    csvContent += 'Datum,Typ,Beschreibung,Bar,TWINT,SumUp,Total,Status\n'
  } else if (type.startsWith('revenue_')) {
    csvContent += 'Datum,Beschreibung,Betrag,Status\n'
  } else {
    csvContent += 'Datum,Kategorie,Beschreibung,Betrag,Zahlungsart\n'
  }
  
  // Daten hinzuf√ºgen
  transactions.forEach(transaction => {
    const date = new Date(transaction.date).toLocaleDateString('de-CH')
    
    if (type === 'complete_month') {
      const sign = transaction.type === 'daily_report' ? '' : '-'
      csvContent += `${date},"${transaction.type === 'daily_report' ? 'Tagesabschluss' : 'Ausgabe'}","${transaction.description}",${transaction.cash || 0},${transaction.twint || 0},${transaction.sumup || 0},${sign}${transaction.total},${transaction.status || ''}\n`
    } else if (type.startsWith('revenue_')) {
      const amount = type === 'revenue_cash' ? transaction.cash : 
                   type === 'revenue_twint' ? transaction.twint : 
                   transaction.sumup
      csvContent += `${date},"${transaction.description}",${amount},${transaction.status}\n`
    } else {
      csvContent += `${date},"${transaction.category || 'Ausgabe'}","${transaction.description}",${transaction.total},"${transaction.paymentMethod === 'cash' ? 'Bar' : 'Bank'}"\n`
    }
  })
  
  // CSV-Datei herunterladen
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const url = window.URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `${label.toLowerCase().replace(/\s+/g, '_')}_${selectedMonth}.csv`
  a.click()
  window.URL.revokeObjectURL(url)
}

// PDF Export f√ºr kompletten Monat (moderne React-PDF Version)
export async function exportMonthlyPDF(
  stats: MonthlyStatsData,
  transactions: TransactionItem[],
  selectedMonth: string,
  autoGenerated = false
): Promise<void> {
  console.log("üîß Monthly PDF Generierung gestartet f√ºr:", selectedMonth)
  
  try {
    // React-PDF Komponente erstellen
    const pdfComponent = <MonthlyReportPDF 
      stats={stats}
      transactions={transactions} 
      selectedMonth={selectedMonth}
    />
    
    // PDF direkt mit react-pdf erstellen
    const { pdf } = await import('@react-pdf/renderer')
    const blob = await pdf(pdfComponent).toBlob()
    const fileName = `monatsabschluss-${selectedMonth}.pdf`
    const file = new File([blob], fileName, { type: 'application/pdf' })
    
    // Datei zu Supabase Storage hochladen
    const { supabase } = await import('@/lib/supabase/client')
    const filePath = `documents/monthly_reports/${fileName}`
    console.log("‚òÅÔ∏è Lade Monthly PDF zu Storage hoch:", filePath)
    
    const { error: uploadError } = await supabase.storage
      .from('documents')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: true
      })
      
    if (uploadError) {
      console.error('‚ùå Fehler beim Hochladen der Monthly PDF:', uploadError)
      throw uploadError
    }

    // Dokument-Eintrag in der Datenbank erstellen
    console.log("üóÉÔ∏è Erstelle Monthly Document-Eintrag...")
    const { data: userData } = await supabase.auth.getUser()
    if (!userData?.user) {
      throw new Error('Benutzer nicht angemeldet')
    }
    
    const monthDate = `${selectedMonth}-01`
    const monthlyUUID = crypto.randomUUID()
    
    const documentData = {
      type: 'monthly_report' as const,
      reference_id: monthlyUUID,
      file_path: filePath,
      payment_method: null,
      document_date: monthDate,
      user_id: userData.user.id
    }
    
    const { error: documentError } = await supabase
      .from('documents')
      .upsert(documentData)
    
    if (documentError) {
      console.error('‚ùå Fehler beim Erstellen des Monthly Document-Eintrags:', documentError)
      throw documentError
    }
    
    console.log("‚úÖ Monthly Document-Eintrag erfolgreich erstellt")

    // PDF nur √∂ffnen wenn nicht automatisch generiert
    if (!autoGenerated) {
      console.log("üåê √ñffne Monthly PDF...")
      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(filePath)
      
      window.open(urlData.publicUrl, '_blank')
      console.log("üéâ Monthly PDF erfolgreich erstellt und ge√∂ffnet")
    } else {
      console.log("üéâ Monthly PDF automatisch erstellt und gespeichert")
    }
    
  } catch (error: any) {
    console.error('‚ùå Fehler beim Erstellen der Monthly PDF:', error)
    
    // Fallback: Manueller Download mit alter Methode
    console.log("‚ö†Ô∏è Fallback zu direktem Download...")
    const blob = await createFallbackPDF(stats, transactions, selectedMonth)
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `monatsabschluss-${selectedMonth}.pdf`
    a.click()
    window.URL.revokeObjectURL(url)
  }
}

// Fallback-Funktion f√ºr direkten Download (vereinfacht)
async function createFallbackPDF(
  stats: MonthlyStatsData,
  transactions: TransactionItem[],
  selectedMonth: string
): Promise<Blob> {
  // Dynamischer Import f√ºr React-PDF
  const { pdf } = await import('@react-pdf/renderer')
  
  const pdfComponent = <MonthlyReportPDF 
    stats={stats}
    transactions={transactions}
    selectedMonth={selectedMonth}
  />
  
  return await pdf(pdfComponent).toBlob()
}

// Hauptexport-Funktion
export async function handleExport(data: ExportData): Promise<void> {
  const { type } = data
  
  if (type === 'complete_month') {
    // F√ºr kompletten Monat PDF erstellen
    await exportMonthlyPDF(data.stats, data.transactions, data.selectedMonth)
  } else {
    // F√ºr spezifische Exports CSV erstellen
    exportToCSV(data)
  }
}